/*
To start this plugin aoutomatically place this code into startup Beanshell script:

import RMI.RMI; 
RMI plugin = new RMI(); 
plugin.setApp(gui); 
plugin.show(); 

*/

package RMI;

import static RMI.RMI.FLT_TRANS;
import static com.google.common.math.DoubleMath.log2;
import ij.gui.OvalRoi;
import ij.gui.Roi;
import ij.plugin.frame.RoiManager;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Insets;
import java.awt.TextArea;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import static java.awt.event.KeyEvent.VK_F5;
import static java.awt.event.KeyEvent.VK_F9;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import javax.swing.filechooser.FileFilter;
import java.io.IOException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.ButtonModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JProgressBar;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.layout.GroupLayout;
import org.jdesktop.layout.LayoutStyle;
//import org.micromanager.utils.MMScriptException;

/**
 *
 * @author sg
 */
public class RMIControlForm extends javax.swing.JFrame 
implements MouseListener
{

    private RMI rmi;
    Color brown = new Color(179,79,50);  
    Color drk_green = new Color(0,153,0);  
    
    public RMIControlForm() {
        initComponents();
    }
    public void SetContext(RMI _rmi) {
        rmi = _rmi;
    }
    public void SetTextProgress(String str) {
        if (rmi.bAcqNotFastEnough)
        {
            str += " (Acquisition time is longer than Period!)";
            labelRecProgress.setForeground(Color.red);
        }
            labelRecProgress.setForeground(Color.black);
        
        labelRecProgress.setText(str);
    }
    public void SetProgressBar(int val) {
        progressRec.setValue(val);
    }
    public void SetProgressCalcBar(int val) {
        progressCalc.setValue(val);
        progressCalc.invalidate();
    }
    
    public void CheckCanExit() throws InterruptedException{
        Object[] options = {"Break and Exit","Just break","Continue"};
        boolean canExit = false;
        if (rmi.getRecState()==RSTATE.REC_RUNNING)
        {
            int n = JOptionPane.showOptionDialog(null, "Acquisition is running. Do you want to stop?",    "Warning", JOptionPane.YES_NO_CANCEL_OPTION,    JOptionPane.QUESTION_MESSAGE,    null,    options,    options[2]);
            switch (n){
                case 0: this.setDefaultCloseOperation(EXIT_ON_CLOSE); canExit=true; break;
                case 1: rmi.recStop(); this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);break;
                case 2: this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE); break;
            }
        }
        else
        {
           this.setDefaultCloseOperation(EXIT_ON_CLOSE);
           canExit=true;
        }
          
        if (canExit)
        {
            //store preferences
            rmi.SaveSettings();
            rmi.acqExit();
            System.exit(0);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bFilterGroup = new ButtonGroup();
        AnalizeGroup = new ButtonGroup();
        buttonGroupAnalysisType = new ButtonGroup();
        jPanel12 = new JPanel();
        jTabbedPane1 = new JTabbedPane();
        jPanel1 = new JPanel();
        jPanel5 = new JPanel();
        expL2 = new JFormattedTextField();
        expTrans = new JFormattedTextField();
        expL1 = new JFormattedTextField();
        bL2 = new JToggleButton();
        bL1 = new JToggleButton();
        bTrans = new JToggleButton();
        bG = new JToggleButton();
        bR = new JToggleButton();
        expG = new JFormattedTextField();
        expR = new JFormattedTextField();
        bTransCapture = new JCheckBox();
        bGCapture = new JCheckBox();
        bRCapture = new JCheckBox();
        bL1Capture = new JCheckBox();
        bL2Capture = new JCheckBox();
        jPanel2 = new JPanel();
        jLabel4 = new JLabel();
        jLabel5 = new JLabel();
        recTime = new JFormattedTextField();
        recInterval = new JFormattedTextField();
        bSnap = new JButton();
        bLive = new JButton();
        bShutter = new JButton();
        jPanel4 = new JPanel();
        jLabel8 = new JLabel();
        jLabel9 = new JLabel();
        dataHome = new JFormattedTextField();
        bDataHome = new JButton();
        jLabel10 = new JLabel();
        dataFile = new JFormattedTextField();
        bDataFile = new JButton();
        bWriteToDisk = new JCheckBox();
        bNewExp = new JButton();
        bShowComment = new JButton();
        adjInterval = new JLabel();
        bStart = new JButton();
        bStop = new JButton();
        progressRec = new JProgressBar();
        labelRecProgress = new JLabel();
        bPause = new JButton();
        bClose = new JButton();
        bMultiPos = new JCheckBox();
        bAutoRef = new JCheckBox();
        jPanel11 = new JPanel();
        jLabel26 = new JLabel();
        eLastFrame = new JFormattedTextField();
        progressCalc = new JProgressBar();
        labelProgressCalc = new JLabel();
        bGFPCorrection = new JCheckBox();
        bAnalize = new JButton();
        bShowROIMan = new JButton();
        jPanel14 = new JPanel();
        jLabel30 = new JLabel();
        jLabel2 = new JLabel();
        jLabel3 = new JLabel();
        jLabel25 = new JLabel();
        jLabel27 = new JLabel();
        jLabel29 = new JLabel();
        jRadioButton1 = new JRadioButton();
        jRadioButton2 = new JRadioButton();
        bLoadData = new JToggleButton();
        bOnlineAnalysis = new JToggleButton();
        analysisFile = new JFormattedTextField();
        jLabel28 = new JLabel();
        bAddRedROIs = new JToggleButton();
        nAddROIs = new JFormattedTextField();
        bAddGreenROIs = new JToggleButton();
        jLabel38 = new JLabel();
        bAddGreenROIs1 = new JToggleButton();
        jLabel39 = new JLabel();
        jPanel13 = new JPanel();
        L2BG = new JFormattedTextField();
        jLabel40 = new JLabel();
        L1BG = new JFormattedTextField();
        jLabel41 = new JLabel();
        chkDoConstSubtraction = new JCheckBox();
        jPanel6 = new JPanel();
        jPanel3 = new JPanel();
        zoomLive = new JFormattedTextField();
        jLabel6 = new JLabel();
        jLabel7 = new JLabel();
        binLive = new JComboBox();
        jPanel7 = new JPanel();
        channelGroup = new JFormattedTextField();
        jLabel11 = new JLabel();
        jPanel9 = new JPanel();
        filterTrans = new JFormattedTextField();
        jLabel14 = new JLabel();
        jLabel15 = new JLabel();
        filterL1 = new JFormattedTextField();
        filterLabelTrans = new JFormattedTextField();
        filterLabelL1 = new JFormattedTextField();
        filterLabelL2 = new JFormattedTextField();
        filterL2 = new JFormattedTextField();
        jLabel16 = new JLabel();
        jLabel17 = new JLabel();
        jLabel18 = new JLabel();
        shutterDelay = new JFormattedTextField();
        jLabel19 = new JLabel();
        jLabel20 = new JLabel();
        filterR = new JFormattedTextField();
        jLabel21 = new JLabel();
        jLabel22 = new JLabel();
        filterG = new JFormattedTextField();
        filterLabelG = new JFormattedTextField();
        filterLabelR = new JFormattedTextField();
        jPanel8 = new JPanel();
        zoomRec = new JFormattedTextField();
        jLabel12 = new JLabel();
        jLabel13 = new JLabel();
        binRec = new JComboBox();
        stateDeviceName = new JFormattedTextField();
        jLabel23 = new JLabel();
        cameraDeviceName = new JFormattedTextField();
        jLabel24 = new JLabel();
        tweakExpBin1 = new JFormattedTextField();
        jLabel32 = new JLabel();
        jLabel31 = new JLabel();
        jLabel33 = new JLabel();
        jLabel34 = new JLabel();
        tweakExpBin2 = new JFormattedTextField();
        jLabel35 = new JLabel();
        jLabel36 = new JLabel();
        tweakExpBin4 = new JFormattedTextField();
        jLabel37 = new JLabel();
        tweakExp = new JCheckBox();
        jPanel10 = new JPanel();
        jScrollPane1 = new JScrollPane();
        jTable1 = new JTable();
        bProtocolApply = new JButton();
        bProtocolDiscard = new JButton();
        jTextField2 = new JTextField();

        GroupLayout jPanel12Layout = new GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(jPanel12Layout.createParallelGroup(GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );
        jPanel12Layout.setVerticalGroup(jPanel12Layout.createParallelGroup(GroupLayout.LEADING)
            .add(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Ratiometric imaging");
        setIconImages(null);
        setResizable(false);
        setSize(new Dimension(300, 300));
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addKeyListener(new KeyAdapter() {
            public void keyReleased(KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        jTabbedPane1.setDoubleBuffered(true);
        jTabbedPane1.setName("Acquisition"); // NOI18N
        jTabbedPane1.setPreferredSize(new Dimension(368, 602));

        jPanel1.setName(""); // NOI18N

        jPanel5.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Channels"));
        jPanel5.setName(""); // NOI18N

        expL2.setBackground(new Color(207, 225, 255));
        expL2.setText("250");
        expL2.setToolTipText("Exposure time, ms");
        expL2.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        expL2.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                expL2FocusLost(evt);
            }
        });

        expTrans.setText("7");
        expTrans.setToolTipText("Exposure time, ms");
        expTrans.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        expTrans.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                expTransFocusLost(evt);
            }
        });

        expL1.setBackground(new Color(231, 216, 255));
        expL1.setText("250");
        expL1.setToolTipText("Exposure time, ms");
        expL1.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        expL1.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                expL1FocusLost(evt);
            }
        });

        bFilterGroup.add(bL2);
        bL2.setFont(new Font("Arial", 1, 18)); // NOI18N
        bL2.setForeground(new Color(51, 102, 255));
        bL2.setText("L2");
        bL2.setToolTipText("Select active channel");
        bL2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bL2ActionPerformed(evt);
            }
        });

        bFilterGroup.add(bL1);
        bL1.setFont(new Font("Arial", 1, 18)); // NOI18N
        bL1.setForeground(new Color(51, 102, 255));
        bL1.setText("L1");
        bL1.setToolTipText("Select active channel");
        bL1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bL1ActionPerformed(evt);
            }
        });

        bFilterGroup.add(bTrans);
        bTrans.setFont(new Font("Arial", 1, 18)); // NOI18N
        bTrans.setForeground(new Color(153, 153, 0));
        bTrans.setText("Trans");
        bTrans.setToolTipText("Select active channel");
        bTrans.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bTransActionPerformed(evt);
            }
        });

        bFilterGroup.add(bG);
        bG.setFont(new Font("Arial", 1, 18)); // NOI18N
        bG.setForeground(new Color(0, 153, 0));
        bG.setText("G");
        bG.setToolTipText("Select active channel");
        bG.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bGActionPerformed(evt);
            }
        });

        bFilterGroup.add(bR);
        bR.setFont(new Font("Arial", 1, 18)); // NOI18N
        bR.setForeground(new Color(255, 0, 51));
        bR.setText("R");
        bR.setToolTipText("Select active channel");
        bR.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bRActionPerformed(evt);
            }
        });

        expG.setBackground(new Color(204, 255, 204));
        expG.setText("100");
        expG.setToolTipText("Exposure time, ms");
        expG.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        expG.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                expGFocusLost(evt);
            }
        });

        expR.setBackground(new Color(255, 204, 204));
        expR.setText("100");
        expR.setToolTipText("Exposure time, ms");
        expR.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        expR.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                expRFocusLost(evt);
            }
        });

        bTransCapture.setToolTipText("Include channel into acquisition");
        bTransCapture.setAlignmentY(0.0F);
        bTransCapture.setMargin(new Insets(1, 2, 2, 2));
        bTransCapture.setMaximumSize(new Dimension(25, 25));
        bTransCapture.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bTransCaptureActionPerformed(evt);
            }
        });

        bGCapture.setToolTipText("Include channel into acquisition");
        bGCapture.setAlignmentY(0.0F);
        bGCapture.setMargin(new Insets(1, 2, 2, 2));
        bGCapture.setMaximumSize(new Dimension(25, 25));
        bGCapture.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bGCaptureActionPerformed(evt);
            }
        });

        bRCapture.setToolTipText("Include channel into acquisition");
        bRCapture.setAlignmentY(0.0F);
        bRCapture.setMargin(new Insets(1, 2, 2, 2));
        bRCapture.setMaximumSize(new Dimension(25, 25));
        bRCapture.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bRCaptureActionPerformed(evt);
            }
        });

        bL1Capture.setToolTipText("Include channel into acquisition");
        bL1Capture.setAlignmentY(0.0F);
        bL1Capture.setMargin(new Insets(1, 2, 2, 2));
        bL1Capture.setMaximumSize(new Dimension(25, 25));
        bL1Capture.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bL1CaptureActionPerformed(evt);
            }
        });

        bL2Capture.setToolTipText("Include channel into acquisition");
        bL2Capture.setAlignmentY(0.0F);
        bL2Capture.setMargin(new Insets(1, 2, 2, 2));
        bL2Capture.setMaximumSize(new Dimension(25, 25));
        bL2Capture.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bL2CaptureActionPerformed(evt);
            }
        });

        GroupLayout jPanel5Layout = new GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(jPanel5Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(jPanel5Layout.createParallelGroup(GroupLayout.TRAILING)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jPanel5Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(bL1Capture, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .add(bL2Capture, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.RELATED)
                        .add(jPanel5Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(bL1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(bL2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(LayoutStyle.RELATED)
                        .add(jPanel5Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(expL1, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE)
                            .add(expL2, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jPanel5Layout.createParallelGroup(GroupLayout.TRAILING)
                            .add(jPanel5Layout.createParallelGroup(GroupLayout.LEADING)
                                .add(bGCapture, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .add(GroupLayout.TRAILING, bRCapture, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .add(bTransCapture, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.RELATED)
                        .add(jPanel5Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(jPanel5Layout.createSequentialGroup()
                                .add(bTrans)
                                .addPreferredGap(LayoutStyle.RELATED)
                                .add(expTrans, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE))
                            .add(jPanel5Layout.createSequentialGroup()
                                .add(bG, GroupLayout.PREFERRED_SIZE, 81, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.RELATED)
                                .add(expG, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE))
                            .add(jPanel5Layout.createSequentialGroup()
                                .add(bR, GroupLayout.PREFERRED_SIZE, 81, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.RELATED)
                                .add(expR, GroupLayout.PREFERRED_SIZE, 38, GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5Layout.linkSize(new Component[] {bL1, bL2, bTrans}, GroupLayout.HORIZONTAL);

        jPanel5Layout.setVerticalGroup(jPanel5Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(jPanel5Layout.createParallelGroup(GroupLayout.BASELINE)
                        .add(bTrans, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)
                        .add(expTrans, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .add(bTransCapture, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(jPanel5Layout.createParallelGroup(GroupLayout.BASELINE)
                        .add(bG, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)
                        .add(expG, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .add(bGCapture, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(bRCapture, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(jPanel5Layout.createParallelGroup(GroupLayout.BASELINE)
                        .add(bR, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)
                        .add(expR, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(jPanel5Layout.createParallelGroup(GroupLayout.BASELINE)
                        .add(bL1, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)
                        .add(expL1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .add(bL1Capture, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(bL2Capture, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(jPanel5Layout.createParallelGroup(GroupLayout.BASELINE)
                        .add(bL2, GroupLayout.PREFERRED_SIZE, 39, GroupLayout.PREFERRED_SIZE)
                        .add(expL2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .add(0, 8, Short.MAX_VALUE))
        );

        jPanel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Acquisition"));
        jPanel2.setName(""); // NOI18N

        jLabel4.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Recording, min:");

        jLabel5.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Period, s :");

        recTime.setText("30");
        recTime.setToolTipText("Approximate time of acquisition");
        recTime.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        recTime.setInheritsPopupMenu(true);
        recTime.setVerifyInputWhenFocusTarget(false);
        recTime.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                recTimeFocusLost(evt);
            }
        });

        recInterval.setText("2");
        recInterval.setToolTipText("Period of taking image frames");
        recInterval.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        recInterval.setVerifyInputWhenFocusTarget(false);
        recInterval.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                recIntervalFocusLost(evt);
            }
        });
        recInterval.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                recIntervalActionPerformed(evt);
            }
        });

        bSnap.setFont(new Font("Arial", 1, 18)); // NOI18N
        bSnap.setForeground(new Color(0, 102, 102));
        bSnap.setText("Snap");
        bSnap.setToolTipText("Snapshot from active channel");
        bSnap.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bSnapActionPerformed(evt);
            }
        });

        bLive.setFont(new Font("Arial", 1, 18)); // NOI18N
        bLive.setForeground(new Color(51, 102, 255));
        bLive.setText("Live");
        bLive.setToolTipText("Streaming from active channel");
        bLive.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bLiveActionPerformed(evt);
            }
        });

        bShutter.setFont(new Font("Arial", 1, 18)); // NOI18N
        bShutter.setForeground(new Color(102, 0, 102));
        bShutter.setText("Shutter");
        bShutter.setEnabled(false);
        bShutter.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bShutterActionPerformed(evt);
            }
        });

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(bSnap, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(0, 0, Short.MAX_VALUE)
                                .add(jLabel4))
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(jLabel5)
                                .add(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(LayoutStyle.RELATED)
                        .add(jPanel2Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(recInterval, GroupLayout.PREFERRED_SIZE, 42, GroupLayout.PREFERRED_SIZE)
                            .add(recTime, GroupLayout.PREFERRED_SIZE, 42, GroupLayout.PREFERRED_SIZE)))
                    .add(bLive, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bShutter, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(recTime, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(recInterval, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(bSnap, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(bLive, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(bShutter, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel4.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Storage"));
        jPanel4.setName(""); // NOI18N

        jLabel8.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Directly to disk?");

        jLabel9.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Data home :");

        dataHome.setText("d:\\Data");
        dataHome.setToolTipText("Experiments will be stored here");
        dataHome.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        dataHome.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                dataHomeFocusLost(evt);
            }
        });

        bDataHome.setText("...");
        bDataHome.setToolTipText("Select home folder");
        bDataHome.setMargin(new Insets(5, 14, 2, 14));
        bDataHome.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bDataHomeActionPerformed(evt);
            }
        });

        jLabel10.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("Acq. name :");

        dataFile.setText("unnamed");
        dataFile.setToolTipText("Current acquisition name");
        dataFile.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        dataFile.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                dataFileKeyTyped(evt);
            }
        });

        bDataFile.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        bDataFile.setForeground(new Color(153, 51, 0));
        bDataFile.setText("₪");
        bDataFile.setToolTipText("Create new name based on date and time");
        bDataFile.setActionCommand("New name");
        bDataFile.setMargin(new Insets(2, 5, 2, 5));
        bDataFile.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bDataFileActionPerformed(evt);
            }
        });

        bWriteToDisk.setToolTipText("If checked, acquired data will be immediately stored to disk");
        bWriteToDisk.setAlignmentY(0.0F);
        bWriteToDisk.setMargin(new Insets(1, 2, 2, 2));
        bWriteToDisk.setMaximumSize(new Dimension(25, 25));
        bWriteToDisk.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bWriteToDiskActionPerformed(evt);
            }
        });

        bNewExp.setFont(new Font("Arial", 1, 14)); // NOI18N
        bNewExp.setText("New Exp.");
        bNewExp.setToolTipText("Create storage for new experiment");
        bNewExp.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bNewExpActionPerformed(evt);
            }
        });

        bShowComment.setFont(new Font("Arial", 1, 14)); // NOI18N
        bShowComment.setText("Comments");
        bShowComment.setToolTipText("Open comment window");
        bShowComment.setEnabled(false);
        bShowComment.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bShowCommentActionPerformed(evt);
            }
        });

        adjInterval.setHorizontalAlignment(SwingConstants.RIGHT);
        adjInterval.setText("Idle");

        GroupLayout jPanel4Layout = new GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(jPanel4Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jPanel4Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(jPanel4Layout.createSequentialGroup()
                                .add(jLabel10)
                                .add(0, 0, Short.MAX_VALUE))
                            .add(jPanel4Layout.createSequentialGroup()
                                .add(jLabel9)
                                .addPreferredGap(LayoutStyle.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .add(jPanel4Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(dataHome, GroupLayout.PREFERRED_SIZE, 190, GroupLayout.PREFERRED_SIZE)
                            .add(dataFile, GroupLayout.PREFERRED_SIZE, 190, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.RELATED)
                        .add(jPanel4Layout.createParallelGroup(GroupLayout.LEADING, false)
                            .add(bDataFile, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(bDataHome, GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)))
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jPanel4Layout.createParallelGroup(GroupLayout.TRAILING, false)
                            .add(GroupLayout.LEADING, bNewExp, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jPanel4Layout.createSequentialGroup()
                                .add(jLabel8)
                                .addPreferredGap(LayoutStyle.RELATED)
                                .add(bWriteToDisk, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                        .add(jPanel4Layout.createParallelGroup(GroupLayout.TRAILING)
                            .add(jPanel4Layout.createSequentialGroup()
                                .add(83, 83, 83)
                                .add(bShowComment, GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                            .add(jPanel4Layout.createSequentialGroup()
                                .addPreferredGap(LayoutStyle.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(adjInterval, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(jPanel4Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(jLabel9)
                    .add(dataHome, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(bDataHome, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(jLabel10)
                    .add(dataFile, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(bDataFile))
                .add(5, 5, 5)
                .add(jPanel4Layout.createParallelGroup(GroupLayout.TRAILING)
                    .add(jLabel8)
                    .add(bWriteToDisk, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(adjInterval))
                .addPreferredGap(LayoutStyle.UNRELATED)
                .add(jPanel4Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(bNewExp, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                    .add(bShowComment, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        bStart.setFont(new Font("Arial", 1, 18)); // NOI18N
        bStart.setForeground(new Color(0, 102, 0));
        bStart.setText("Run!");
        bStart.setToolTipText("Start acquisition");
        bStart.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bStartActionPerformed(evt);
            }
        });

        bStop.setFont(new Font("Arial", 1, 18)); // NOI18N
        bStop.setForeground(new Color(153, 0, 51));
        bStop.setText("Stop");
        bStop.setToolTipText("Stop acquisition");
        bStop.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bStopActionPerformed(evt);
            }
        });

        progressRec.setToolTipText("Progress of acquisition");
        progressRec.setValue(1);

        labelRecProgress.setText("Idle");

        bPause.setFont(new Font("Arial", 1, 18)); // NOI18N
        bPause.setForeground(new Color(0, 153, 0));
        bPause.setText("Pause");
        bPause.setToolTipText("Pause acquisition");
        bPause.setMargin(new Insets(2, 2, 2, 2));
        bPause.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bPauseActionPerformed(evt);
            }
        });

        bClose.setText("Exit");
        bClose.setToolTipText("Exit program");
        bClose.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bCloseActionPerformed(evt);
            }
        });

        bMultiPos.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        bMultiPos.setText("Use position manager");
        bMultiPos.setActionCommand("");
        bMultiPos.setAlignmentY(0.0F);
        bMultiPos.setEnabled(false);
        bMultiPos.setMargin(new Insets(1, 2, 2, 2));
        bMultiPos.setMaximumSize(new Dimension(25, 25));
        bMultiPos.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bMultiPosActionPerformed(evt);
            }
        });

        bAutoRef.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        bAutoRef.setText("Auto take reference image");
        bAutoRef.setToolTipText("Take reference images from all channels before starting acquisition");
        bAutoRef.setAlignmentY(0.0F);
        bAutoRef.setMargin(new Insets(1, 2, 2, 2));
        bAutoRef.setMaximumSize(new Dimension(25, 25));
        bAutoRef.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bAutoRefActionPerformed(evt);
            }
        });

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(jPanel4, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(bStart, GroupLayout.PREFERRED_SIZE, 88, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.RELATED)
                        .add(bPause, GroupLayout.PREFERRED_SIZE, 88, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.RELATED)
                        .add(bStop, GroupLayout.PREFERRED_SIZE, 88, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(bClose))
                    .add(GroupLayout.TRAILING, labelRecProgress, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(progressRec, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel5, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.RELATED)
                                .add(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .add(bMultiPos, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .add(bAutoRef, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(GroupLayout.LEADING, false)
                    .add(jPanel5, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(12, 12, 12)
                .add(bAutoRef, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(bMultiPos, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.UNRELATED)
                .add(jPanel4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(labelRecProgress)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(progressRec, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(jPanel1Layout.createParallelGroup(GroupLayout.BASELINE)
                        .add(bStart, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                        .add(bPause, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                        .add(bStop, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE))
                    .add(bClose, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Acquisition", jPanel1);

        jLabel26.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel26.setText("Last processed frame :");

        eLastFrame.setText("0");
        eLastFrame.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        eLastFrame.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                eLastFrameActionPerformed(evt);
            }
        });
        eLastFrame.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                eLastFrameKeyTyped(evt);
            }
        });

        progressCalc.setToolTipText("Progress of data processing. Makes sense in offline analysis.");
        progressCalc.setValue(1);

        labelProgressCalc.setText("Idle");

        bGFPCorrection.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        bGFPCorrection.setText("GFP correction");
        bGFPCorrection.setAlignmentY(0.0F);
        bGFPCorrection.setEnabled(false);
        bGFPCorrection.setMargin(new Insets(1, 2, 2, 2));
        bGFPCorrection.setMaximumSize(new Dimension(25, 25));

        bAnalize.setFont(new Font("Arial", 1, 18)); // NOI18N
        bAnalize.setForeground(new Color(102, 0, 102));
        bAnalize.setText("Run Analysis");
        bAnalize.setToolTipText("Surprisingly, it starts analysis");
        bAnalize.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bAnalizeActionPerformed(evt);
            }
        });

        bShowROIMan.setFont(new Font("Arial", 0, 14)); // NOI18N
        bShowROIMan.setText("Show ROI Manager");
        bShowROIMan.setToolTipText("Display ROI Manager to add, change, store or retrieve ROIs");
        bShowROIMan.setActionCommand("");
        bShowROIMan.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bShowROIManActionPerformed(evt);
            }
        });

        jPanel14.setBackground(new Color(255, 255, 204));

        jLabel30.setForeground(new Color(102, 0, 153));

        jLabel2.setFont(new Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setForeground(new Color(204, 0, 0));
        jLabel2.setText("ROI naming rules:");

        jLabel3.setForeground(new Color(102, 0, 153));
        jLabel3.setText("bg# : background ROI (required)");

        jLabel25.setForeground(new Color(102, 0, 153));
        jLabel25.setText("g# : green ROI");

        jLabel27.setForeground(new Color(102, 0, 153));
        jLabel27.setText("r# : red ROI");

        jLabel29.setForeground(new Color(102, 0, 153));
        jLabel29.setText("# : any character(s), case insensitive");

        GroupLayout jPanel14Layout = new GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(jPanel14Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel14Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(jPanel14Layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(jLabel30)
                        .add(220, 220, 220))
                    .add(jPanel14Layout.createSequentialGroup()
                        .add(jPanel14Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(jLabel2)
                            .add(jLabel25)
                            .add(jLabel27))
                        .add(108, 108, 108)
                        .add(jPanel14Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(jLabel3)
                            .add(jLabel29))
                        .add(0, 0, Short.MAX_VALUE))))
        );
        jPanel14Layout.setVerticalGroup(jPanel14Layout.createParallelGroup(GroupLayout.LEADING)
            .add(GroupLayout.TRAILING, jPanel14Layout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jLabel2, GroupLayout.PREFERRED_SIZE, 19, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jLabel3)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jLabel25)
                .addPreferredGap(LayoutStyle.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jLabel27)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jLabel29)
                .addPreferredGap(LayoutStyle.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jLabel30)
                .add(34, 34, 34))
        );

        buttonGroupAnalysisType.add(jRadioButton1);
        jRadioButton1.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Ratiometric analysis (L1&L2 channels required)");
        jRadioButton1.setToolTipText("Currently processes only two last channels from acquisition (expected L1 and L2)");

        buttonGroupAnalysisType.add(jRadioButton2);
        jRadioButton2.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jRadioButton2.setText("Intensity profile for each channel");
        jRadioButton2.setToolTipText("Type of analysis");
        jRadioButton2.setEnabled(false);

        AnalizeGroup.add(bLoadData);
        bLoadData.setFont(new Font("Arial", 1, 18)); // NOI18N
        bLoadData.setForeground(new Color(51, 102, 255));
        bLoadData.setText("Analize Offline");
        bLoadData.setToolTipText("Open previousely acquired data for analysis.");
        bLoadData.setActionCommand("");
        bLoadData.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bLoadDataActionPerformed(evt);
            }
        });

        AnalizeGroup.add(bOnlineAnalysis);
        bOnlineAnalysis.setFont(new Font("Arial", 1, 18)); // NOI18N
        bOnlineAnalysis.setForeground(new Color(0, 153, 0));
        bOnlineAnalysis.setText("Analize Online");
        bOnlineAnalysis.setToolTipText("Press for online analysis after starting acquisition. Take snapshot before starting acquisition to create ROIs for analysis. Follow ROI naming rules.");
        bOnlineAnalysis.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bOnlineAnalysisActionPerformed(evt);
            }
        });

        analysisFile.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        analysisFile.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                analysisFileKeyTyped(evt);
            }
        });

        jLabel28.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel28.setText("Data :");

        bAddRedROIs.setFont(new Font("Arial", 1, 18)); // NOI18N
        bAddRedROIs.setForeground(new Color(204, 0, 0));
        bAddRedROIs.setText("Red");
        bAddRedROIs.setToolTipText("Places n red ROIs to active window");
        bAddRedROIs.setActionCommand("");
        bAddRedROIs.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bAddRedROIsActionPerformed(evt);
            }
        });

        nAddROIs.setText("0");
        nAddROIs.setToolTipText("Enter the number of ROIs you want to add");
        nAddROIs.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        nAddROIs.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                nAddROIsActionPerformed(evt);
            }
        });
        nAddROIs.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                nAddROIsKeyTyped(evt);
            }
        });

        bAddGreenROIs.setFont(new Font("Arial", 1, 18)); // NOI18N
        bAddGreenROIs.setForeground(new Color(0, 153, 0));
        bAddGreenROIs.setText("Green");
        bAddGreenROIs.setToolTipText("Places n green ROIs to active window");
        bAddGreenROIs.setActionCommand("");
        bAddGreenROIs.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bAddGreenROIsActionPerformed(evt);
            }
        });

        jLabel38.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel38.setText("Add ROIs:");

        bAddGreenROIs1.setFont(new Font("Arial", 1, 18)); // NOI18N
        bAddGreenROIs1.setForeground(new Color(102, 102, 102));
        bAddGreenROIs1.setText("BG");
        bAddGreenROIs1.setToolTipText("Places n background ROIs to active window");
        bAddGreenROIs1.setActionCommand("");
        bAddGreenROIs1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bAddGreenROIs1ActionPerformed(evt);
            }
        });

        jLabel39.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel39.setText("n =");

        jPanel13.setBorder(BorderFactory.createTitledBorder("Subtract constant background"));

        L2BG.setText("0");
        L2BG.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        L2BG.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                L2BGFocusLost(evt);
            }
        });

        jLabel40.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel40.setText("L2 :");

        L1BG.setText("0");
        L1BG.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        L1BG.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                L1BGFocusLost(evt);
            }
        });

        jLabel41.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel41.setText("L1 :");

        chkDoConstSubtraction.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        chkDoConstSubtraction.setText("Do subtraction");
        chkDoConstSubtraction.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                chkDoConstSubtractionActionPerformed(evt);
            }
        });

        GroupLayout jPanel13Layout = new GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(jPanel13Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .add(chkDoConstSubtraction)
                .addPreferredGap(LayoutStyle.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel13Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(GroupLayout.TRAILING, jLabel40, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE)
                    .add(GroupLayout.TRAILING, jLabel41, GroupLayout.PREFERRED_SIZE, 32, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.UNRELATED)
                .add(jPanel13Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(GroupLayout.TRAILING, L1BG, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE)
                    .add(GroupLayout.TRAILING, L2BG, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(jPanel13Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel13Layout.createSequentialGroup()
                .add(jPanel13Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(L1BG, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(jLabel41))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel13Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(L2BG, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(jLabel40))
                .add(0, 8, Short.MAX_VALUE))
            .add(jPanel13Layout.createSequentialGroup()
                .add(17, 17, 17)
                .add(chkDoConstSubtraction)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        GroupLayout jPanel11Layout = new GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(jPanel11Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel11Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(GroupLayout.TRAILING, jPanel11Layout.createSequentialGroup()
                        .add(jPanel11Layout.createParallelGroup(GroupLayout.TRAILING)
                            .add(jPanel11Layout.createSequentialGroup()
                                .add(jLabel39)
                                .addPreferredGap(LayoutStyle.UNRELATED)
                                .add(nAddROIs, GroupLayout.PREFERRED_SIZE, 53, GroupLayout.PREFERRED_SIZE))
                            .add(jPanel11Layout.createParallelGroup(GroupLayout.LEADING)
                                .add(jLabel38)
                                .add(jPanel11Layout.createParallelGroup(GroupLayout.LEADING, false)
                                    .add(bAddGreenROIs1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(bAddGreenROIs, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(bAddRedROIs, GroupLayout.PREFERRED_SIZE, 87, GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(LayoutStyle.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jPanel14, GroupLayout.PREFERRED_SIZE, 198, GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .add(jPanel11Layout.createSequentialGroup()
                        .add(jPanel11Layout.createParallelGroup(GroupLayout.TRAILING)
                            .add(progressCalc, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jPanel11Layout.createSequentialGroup()
                                .add(bGFPCorrection, GroupLayout.PREFERRED_SIZE, 124, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(jLabel26)
                                .addPreferredGap(LayoutStyle.RELATED)
                                .add(eLastFrame, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE))
                            .add(analysisFile)
                            .add(GroupLayout.LEADING, jPanel11Layout.createSequentialGroup()
                                .add(bShowROIMan)
                                .addPreferredGap(LayoutStyle.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(bAnalize, GroupLayout.PREFERRED_SIZE, 168, GroupLayout.PREFERRED_SIZE))
                            .add(GroupLayout.LEADING, jPanel11Layout.createSequentialGroup()
                                .add(jPanel11Layout.createParallelGroup(GroupLayout.TRAILING)
                                    .add(GroupLayout.LEADING, jRadioButton1)
                                    .add(GroupLayout.LEADING, jRadioButton2)
                                    .add(GroupLayout.LEADING, labelProgressCalc, GroupLayout.PREFERRED_SIZE, 334, GroupLayout.PREFERRED_SIZE)
                                    .add(GroupLayout.LEADING, jPanel11Layout.createSequentialGroup()
                                        .add(bOnlineAnalysis, GroupLayout.PREFERRED_SIZE, 171, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.RELATED)
                                        .add(bLoadData, GroupLayout.PREFERRED_SIZE, 171, GroupLayout.PREFERRED_SIZE))
                                    .add(GroupLayout.LEADING, jLabel28))
                                .add(0, 0, Short.MAX_VALUE))
                            .add(GroupLayout.LEADING, jPanel13, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .add(13, 13, 13))))
        );
        jPanel11Layout.setVerticalGroup(jPanel11Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel11Layout.createSequentialGroup()
                .add(24, 24, 24)
                .add(jPanel11Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(bOnlineAnalysis, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(bLoadData, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(LayoutStyle.UNRELATED)
                .add(jLabel28)
                .add(4, 4, 4)
                .add(analysisFile, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .add(10, 10, 10)
                .add(jRadioButton2, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jRadioButton1)
                .addPreferredGap(LayoutStyle.UNRELATED)
                .add(jPanel11Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(eLastFrame, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(jLabel26)
                    .add(bGFPCorrection, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .add(4, 4, 4)
                .add(jPanel13, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.UNRELATED)
                .add(jLabel38)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel11Layout.createParallelGroup(GroupLayout.TRAILING)
                    .add(jPanel14, GroupLayout.PREFERRED_SIZE, 140, GroupLayout.PREFERRED_SIZE)
                    .add(jPanel11Layout.createSequentialGroup()
                        .add(jPanel11Layout.createParallelGroup(GroupLayout.BASELINE)
                            .add(nAddROIs, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .add(jLabel39))
                        .addPreferredGap(LayoutStyle.UNRELATED)
                        .add(bAddRedROIs)
                        .addPreferredGap(LayoutStyle.RELATED)
                        .add(bAddGreenROIs)
                        .addPreferredGap(LayoutStyle.RELATED)
                        .add(bAddGreenROIs1)))
                .add(18, 18, 18)
                .add(jPanel11Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(bAnalize, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
                    .add(bShowROIMan, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(labelProgressCalc)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(progressCalc, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .add(58, 58, 58))
        );

        jTabbedPane1.addTab("Analysis", jPanel11);

        jPanel6.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jPanel3.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Live"));

        zoomLive.setText("1");
        zoomLive.setToolTipText("Image zoom when in Live mode");
        zoomLive.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        zoomLive.setVerifyInputWhenFocusTarget(false);
        zoomLive.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                zoomLiveFocusLost(evt);
            }
        });

        jLabel6.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Zoom :");

        jLabel7.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Bin :");

        binLive.setModel(new DefaultComboBoxModel(new String[] { "1", "2", "4", "8" }));
        binLive.setToolTipText("Bining when in live mode");
        binLive.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                binLiveItemStateChanged(evt);
            }
        });

        GroupLayout jPanel3Layout = new GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                        .add(jLabel6)
                        .addPreferredGap(LayoutStyle.RELATED))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jLabel7)
                        .add(22, 22, 22)))
                .add(jPanel3Layout.createParallelGroup(GroupLayout.LEADING, false)
                    .add(binLive, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(zoomLive, GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(zoomLive, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(binLive, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .add(0, 14, Short.MAX_VALUE))
        );

        jPanel7.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "uManager"));

        channelGroup.setText("Channels");
        channelGroup.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        channelGroup.setVerifyInputWhenFocusTarget(false);
        channelGroup.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                channelGroupFocusLost(evt);
            }
        });

        jLabel11.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("Group :");

        GroupLayout jPanel7Layout = new GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(jPanel7Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel11)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(channelGroup, GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(jPanel7Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .add(jPanel7Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(channelGroup, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(jLabel11))
                .add(0, 12, Short.MAX_VALUE))
        );

        jPanel9.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Channels"));

        filterTrans.setText("1");
        filterTrans.setToolTipText("Physical position of the filter in the wheel");
        filterTrans.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        filterTrans.setVerifyInputWhenFocusTarget(false);
        filterTrans.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                filterTransFocusLost(evt);
            }
        });

        jLabel14.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel14.setForeground(new Color(102, 102, 0));
        jLabel14.setText("Trans");

        jLabel15.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel15.setForeground(new Color(102, 0, 153));
        jLabel15.setText("L1");

        filterL1.setText("1");
        filterL1.setToolTipText("Physical position of the filter in the wheel");
        filterL1.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        filterL1.setVerifyInputWhenFocusTarget(false);
        filterL1.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                filterL1FocusLost(evt);
            }
        });

        filterLabelTrans.setText("1");
        filterLabelTrans.setToolTipText("Channel name stored in acquisition");
        filterLabelTrans.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        filterLabelTrans.setVerifyInputWhenFocusTarget(false);
        filterLabelTrans.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                filterLabelTransFocusLost(evt);
            }
        });

        filterLabelL1.setText("1");
        filterLabelL1.setToolTipText("Channel name stored in acquisition");
        filterLabelL1.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        filterLabelL1.setVerifyInputWhenFocusTarget(false);
        filterLabelL1.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                filterLabelL1FocusLost(evt);
            }
        });

        filterLabelL2.setText("1");
        filterLabelL2.setToolTipText("Channel name stored in acquisition");
        filterLabelL2.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        filterLabelL2.setVerifyInputWhenFocusTarget(false);
        filterLabelL2.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                filterLabelL2FocusLost(evt);
            }
        });

        filterL2.setText("1");
        filterL2.setToolTipText("Physical position of the filter in the wheel");
        filterL2.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        filterL2.setVerifyInputWhenFocusTarget(false);
        filterL2.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                filterL2FocusLost(evt);
            }
        });

        jLabel16.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setForeground(new Color(51, 0, 255));
        jLabel16.setText("L2");

        jLabel17.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel17.setText("Filter#");

        jLabel18.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel18.setText("Label");

        shutterDelay.setText("1");
        shutterDelay.setToolTipText("Delay to allow filter wheel to settle in a new position");
        shutterDelay.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        shutterDelay.setVerifyInputWhenFocusTarget(false);
        shutterDelay.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                shutterDelayFocusLost(evt);
            }
        });

        jLabel19.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel19.setText("Shutter delay:");

        jLabel20.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel20.setText("ms");

        filterR.setText("1");
        filterR.setToolTipText("Physical position of the filter in the wheel");
        filterR.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        filterR.setVerifyInputWhenFocusTarget(false);
        filterR.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                filterRFocusLost(evt);
            }
        });

        jLabel21.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel21.setForeground(new Color(204, 0, 0));
        jLabel21.setText("R");

        jLabel22.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel22.setForeground(new Color(0, 153, 51));
        jLabel22.setText("G");

        filterG.setText("1");
        filterG.setToolTipText("Physical position of the filter in the wheel");
        filterG.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        filterG.setVerifyInputWhenFocusTarget(false);
        filterG.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                filterGFocusLost(evt);
            }
        });

        filterLabelG.setText("1");
        filterLabelG.setToolTipText("Channel name stored in acquisition");
        filterLabelG.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        filterLabelG.setVerifyInputWhenFocusTarget(false);
        filterLabelG.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                filterLabelGFocusLost(evt);
            }
        });

        filterLabelR.setText("1");
        filterLabelR.setToolTipText("Channel name stored in acquisition");
        filterLabelR.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        filterLabelR.setVerifyInputWhenFocusTarget(false);
        filterLabelR.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                filterLabelRFocusLost(evt);
            }
        });

        GroupLayout jPanel9Layout = new GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(jPanel9Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel9Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(GroupLayout.TRAILING, jPanel9Layout.createSequentialGroup()
                        .add(jLabel14)
                        .addPreferredGap(LayoutStyle.UNRELATED)
                        .add(jPanel9Layout.createParallelGroup(GroupLayout.LEADING, false)
                            .add(GroupLayout.TRAILING, filterTrans)
                            .add(GroupLayout.TRAILING, jLabel17, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.RELATED)
                        .add(jPanel9Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(jLabel18, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(filterLabelTrans)))
                    .add(jPanel9Layout.createSequentialGroup()
                        .add(jLabel19, GroupLayout.PREFERRED_SIZE, 93, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.UNRELATED)
                        .add(shutterDelay, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.RELATED)
                        .add(jLabel20)
                        .add(0, 149, Short.MAX_VALUE))
                    .add(GroupLayout.TRAILING, jPanel9Layout.createSequentialGroup()
                        .add(jPanel9Layout.createParallelGroup(GroupLayout.TRAILING)
                            .add(jLabel15)
                            .add(jLabel16, GroupLayout.PREFERRED_SIZE, 15, GroupLayout.PREFERRED_SIZE))
                        .add(29, 29, 29)
                        .add(jPanel9Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(jPanel9Layout.createSequentialGroup()
                                .add(filterL1, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.RELATED)
                                .add(filterLabelL1))
                            .add(jPanel9Layout.createSequentialGroup()
                                .add(filterL2, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.RELATED)
                                .add(filterLabelL2))))
                    .add(jPanel9Layout.createSequentialGroup()
                        .add(jPanel9Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(jLabel21, GroupLayout.PREFERRED_SIZE, 15, GroupLayout.PREFERRED_SIZE)
                            .add(jLabel22))
                        .add(29, 29, 29)
                        .add(jPanel9Layout.createParallelGroup(GroupLayout.LEADING, false)
                            .add(filterG)
                            .add(filterR, GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE))
                        .addPreferredGap(LayoutStyle.RELATED)
                        .add(jPanel9Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(filterLabelG)
                            .add(filterLabelR))))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(jPanel9Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel9Layout.createSequentialGroup()
                .add(jPanel9Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(jLabel17)
                    .add(jLabel18))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel9Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(jPanel9Layout.createParallelGroup(GroupLayout.BASELINE)
                        .add(filterTrans, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .add(jLabel14))
                    .add(filterLabelTrans, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel9Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(jLabel22)
                    .add(filterG, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(filterLabelG, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel9Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(filterLabelR, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(filterR, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(jLabel21))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel9Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(filterL1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(jLabel15)
                    .add(filterLabelL1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel9Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(jLabel16)
                    .add(jPanel9Layout.createParallelGroup(GroupLayout.BASELINE)
                        .add(filterL2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .add(filterLabelL2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(LayoutStyle.RELATED, 18, Short.MAX_VALUE)
                .add(jPanel9Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(shutterDelay, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(jLabel19)
                    .add(jLabel20))
                .addContainerGap())
        );

        jPanel8.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Recording"));

        zoomRec.setText("1");
        zoomRec.setToolTipText("Zoom when running acquisition");
        zoomRec.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        zoomRec.setVerifyInputWhenFocusTarget(false);
        zoomRec.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                zoomRecFocusLost(evt);
            }
        });

        jLabel12.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("Zoom :");

        jLabel13.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setText("Bin :");

        binRec.setModel(new DefaultComboBoxModel(new String[] { "1", "2", "4", "8" }));
        binRec.setToolTipText("Binning when running acquisition");
        binRec.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                binRecItemStateChanged(evt);
            }
        });

        GroupLayout jPanel8Layout = new GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(jPanel8Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel8Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(GroupLayout.TRAILING, jLabel12)
                    .add(jLabel13))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel8Layout.createParallelGroup(GroupLayout.LEADING, false)
                    .add(binRec, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(zoomRec, GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(jPanel8Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .add(jPanel8Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(zoomRec, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(jLabel12))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel8Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(jLabel13)
                    .add(binRec, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .add(0, 14, Short.MAX_VALUE))
        );

        stateDeviceName.setText("LPT1");
        stateDeviceName.setToolTipText("Digital output device name in uManager hardware configuration");
        stateDeviceName.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        stateDeviceName.setVerifyInputWhenFocusTarget(false);
        stateDeviceName.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                stateDeviceNameFocusLost(evt);
            }
        });

        jLabel23.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel23.setText("State device name :");

        cameraDeviceName.setText("DCam");
        cameraDeviceName.setToolTipText("Camera device name in uManager hardware configuration");
        cameraDeviceName.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        cameraDeviceName.setVerifyInputWhenFocusTarget(false);
        cameraDeviceName.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                cameraDeviceNameFocusLost(evt);
            }
        });

        jLabel24.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel24.setText("Camera name :");

        tweakExpBin1.setText("1");
        tweakExpBin1.setToolTipText("Check the value at which PI Camea");
        tweakExpBin1.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        tweakExpBin1.setVerifyInputWhenFocusTarget(false);
        tweakExpBin1.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                tweakExpBin1FocusLost(evt);
            }
        });

        jLabel32.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel32.setText("ms");

        jLabel31.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel31.setText("Tweak for PI MicroMAX");

        jLabel33.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel33.setText("Bining 1");

        jLabel34.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel34.setText("Bining 2");

        tweakExpBin2.setText("1");
        tweakExpBin2.setToolTipText("Check the value at which PI Camea");
        tweakExpBin2.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        tweakExpBin2.setVerifyInputWhenFocusTarget(false);
        tweakExpBin2.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                tweakExpBin2FocusLost(evt);
            }
        });

        jLabel35.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel35.setText("ms");

        jLabel36.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel36.setText("ms");

        tweakExpBin4.setText("1");
        tweakExpBin4.setToolTipText("Check the value at which PI Camea");
        tweakExpBin4.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        tweakExpBin4.setVerifyInputWhenFocusTarget(false);
        tweakExpBin4.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                tweakExpBin4FocusLost(evt);
            }
        });

        jLabel37.setFont(new Font("Tahoma", 0, 14)); // NOI18N
        jLabel37.setText("Bining 4");

        tweakExp.setSelected(true);
        tweakExp.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                tweakExpActionPerformed(evt);
            }
        });

        GroupLayout jPanel6Layout = new GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(jPanel6Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .add(jPanel6Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(jPanel6Layout.createSequentialGroup()
                        .add(4, 4, 4)
                        .add(jPanel6Layout.createParallelGroup(GroupLayout.LEADING)
                            .add(jPanel9, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jPanel6Layout.createSequentialGroup()
                                .add(jPanel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.RELATED, 24, Short.MAX_VALUE)
                                .add(jPanel8, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .add(71, 71, 71))
                            .add(jPanel6Layout.createSequentialGroup()
                                .add(jPanel7, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .add(0, 0, Short.MAX_VALUE))
                            .add(jPanel6Layout.createSequentialGroup()
                                .add(6, 6, 6)
                                .add(jPanel6Layout.createParallelGroup(GroupLayout.LEADING)
                                    .add(jPanel6Layout.createSequentialGroup()
                                        .add(jLabel23, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.RELATED)
                                        .add(stateDeviceName))
                                    .add(jPanel6Layout.createSequentialGroup()
                                        .add(jLabel24, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.RELATED)
                                        .add(cameraDeviceName))
                                    .add(jPanel6Layout.createSequentialGroup()
                                        .add(jPanel6Layout.createParallelGroup(GroupLayout.LEADING)
                                            .add(jPanel6Layout.createSequentialGroup()
                                                .add(jLabel33)
                                                .add(8, 8, 8)
                                                .add(tweakExpBin1, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.RELATED)
                                                .add(jLabel32))
                                            .add(jPanel6Layout.createSequentialGroup()
                                                .add(jLabel34)
                                                .add(8, 8, 8)
                                                .add(tweakExpBin2, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.RELATED)
                                                .add(jLabel35))
                                            .add(jPanel6Layout.createSequentialGroup()
                                                .add(jLabel37)
                                                .add(8, 8, 8)
                                                .add(tweakExpBin4, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.RELATED)
                                                .add(jLabel36)))
                                        .add(0, 0, Short.MAX_VALUE))))))
                    .add(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(tweakExp, GroupLayout.PREFERRED_SIZE, 21, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.RELATED)
                        .add(jLabel31)
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(jPanel6Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel9, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel6Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(jPanel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(jPanel8, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel6Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(stateDeviceName, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(jLabel23))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel6Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(cameraDeviceName, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(jLabel24))
                .add(65, 65, 65)
                .add(jPanel6Layout.createParallelGroup(GroupLayout.LEADING, false)
                    .add(tweakExp, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jLabel31, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel6Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(tweakExpBin1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(jLabel33)
                    .add(jLabel32))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel6Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(tweakExpBin2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(jLabel34)
                    .add(jLabel35))
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jPanel6Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(tweakExpBin4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .add(jLabel37)
                    .add(jLabel36))
                .add(370, 370, 370)
                .add(jPanel7, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Settings", jPanel6);

        jTable1.setModel(new DefaultTableModel(
            new Object [][] {
                {"Control",  new Integer(180),  new Integer(1),  new Integer(40),  new Boolean(true)},
                {"Drug 1",  new Integer(180),  new Integer(2),  new Integer(40),  new Boolean(true)},
                {"Wash",  new Integer(120),  new Integer(1),  new Integer(40), null},
                {"Drug 2",  new Integer(180),  new Integer(3),  new Integer(40),  new Boolean(true)},
                {"Wash",  new Integer(120),  new Integer(1),  new Integer(40), null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Action", "Dur, s", "Valve, #", "Open, s", "Rec?"
            }
        ) {
            Class[] types = new Class [] {
                String.class, Integer.class, Integer.class, Integer.class, Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_NEXT_COLUMN);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(120);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(15);
        }

        bProtocolApply.setFont(new Font("Arial", 1, 18)); // NOI18N
        bProtocolApply.setForeground(new Color(153, 0, 51));
        bProtocolApply.setText("Apply");
        bProtocolApply.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bProtocolApplyActionPerformed(evt);
            }
        });

        bProtocolDiscard.setFont(new Font("Arial", 1, 18)); // NOI18N
        bProtocolDiscard.setForeground(new Color(0, 153, 204));
        bProtocolDiscard.setText("Discard");
        bProtocolDiscard.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                bProtocolDiscardActionPerformed(evt);
            }
        });

        GroupLayout jPanel10Layout = new GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(jPanel10Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel10Layout.createParallelGroup(GroupLayout.LEADING)
                    .add(GroupLayout.TRAILING, jPanel10Layout.createSequentialGroup()
                        .add(0, 147, Short.MAX_VALUE)
                        .add(bProtocolApply, GroupLayout.PREFERRED_SIZE, 98, GroupLayout.PREFERRED_SIZE)
                        .add(7, 7, 7)
                        .add(bProtocolDiscard))
                    .add(jScrollPane1, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(jPanel10Layout.createParallelGroup(GroupLayout.LEADING)
            .add(jPanel10Layout.createSequentialGroup()
                .add(7, 7, 7)
                .add(jScrollPane1, GroupLayout.PREFERRED_SIZE, 235, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.UNRELATED)
                .add(jPanel10Layout.createParallelGroup(GroupLayout.BASELINE)
                    .add(bProtocolApply, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE)
                    .add(bProtocolDiscard, GroupLayout.PREFERRED_SIZE, 36, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(306, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Protocol", jPanel10);

        jTextField2.setEditable(false);
        jTextField2.setFont(new Font("Tahoma", 0, 12)); // NOI18N
        jTextField2.setForeground(new Color(102, 102, 102));
        jTextField2.setHorizontalAlignment(JTextField.TRAILING);
        jTextField2.setText("Sergei Grebenyuk, 2016 <sergeigrebenyuk@gmail.com>");
        jTextField2.setToolTipText("E-mail me if you have questions or comments");
        jTextField2.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jTabbedPane1, GroupLayout.PREFERRED_SIZE, 376, GroupLayout.PREFERRED_SIZE)
                .add(0, 0, Short.MAX_VALUE))
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jTextField2)
                .addContainerGap())
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jTabbedPane1, GroupLayout.PREFERRED_SIZE, 623, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.RELATED)
                .add(jTextField2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .add(0, 5, Short.MAX_VALUE))
        );

        jTabbedPane1.getAccessibleContext().setAccessibleDescription("");

        getAccessibleContext().setAccessibleParent(this);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            CheckCanExit();
        } catch (InterruptedException ex) {
            Logger.getLogger(RMIControlForm.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }//GEN-LAST:event_formWindowClosing

    private void formKeyReleased(KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        switch(evt.getKeyCode())
        {
            case VK_F5: {
            try { rmi.recReStart();} 
            catch (Exception ex) {Logger.getLogger(RMIControlForm.class.getName()).log(Level.SEVERE, null, ex);}}
            break; //start
            case VK_F9: {
            try { rmi.recStop();} 
            catch (InterruptedException ex) { Logger.getLogger(RMIControlForm.class.getName()).log(Level.SEVERE, null, ex);            } 
            
        }
break; //stop
        }
    }//GEN-LAST:event_formKeyReleased

    private void formWindowOpened(WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
        dataHome.setText(rmi.DataHome);
        //Date d = new Date();
        //SimpleDateFormat form = new SimpleDateFormat("yyyy-MM-dd@HHmmss");
        //rmi.DataFile = form.format(d); // set the default name
        rmi.newDataFile();
        
        
        dataFile.setText(rmi.DataFile);

        recTime.setText(Float.toString(rmi.recTime));
        recInterval.setText(Float.toString(rmi.recInterval));

        expTrans.setText(Integer.toString(rmi.channels[rmi.FLT_TRANS].exposure));
        expL1.setText(Integer.toString(rmi.channels[rmi.FLT_L1].exposure));
        expL2.setText(Integer.toString(rmi.channels[rmi.FLT_L2].exposure));
        expR.setText(Integer.toString(rmi.channels[rmi.FLT_R].exposure));
        expG.setText(Integer.toString(rmi.channels[rmi.FLT_G].exposure));
        bWriteToDisk.setSelected(rmi.bWriteToDisk);
        bAutoRef.setSelected(rmi.bAutoRef);
        zoomLive.setText(rmi.zoomLive);
        binLive.setSelectedIndex(rmi.binLive);
        zoomRec.setText(rmi.zoomRec);
        binRec.setSelectedIndex(rmi.binRec);
        shutterDelay.setText(Integer.toString(rmi.shutterDelay));
        filterTrans.setText(Integer.toString(rmi.channels[rmi.FLT_TRANS].filterSlot));
        filterL1.setText(Integer.toString(rmi.channels[rmi.FLT_L1].filterSlot)); 
        filterL2.setText(Integer.toString(rmi.channels[rmi.FLT_L2].filterSlot)); 
        filterR.setText(Integer.toString(rmi.channels[rmi.FLT_R].filterSlot)); 
        filterG.setText(Integer.toString(rmi.channels[rmi.FLT_G].filterSlot)); 
        filterLabelTrans.setText(rmi.channels[rmi.FLT_TRANS].label); 
        filterLabelL1.setText(rmi.channels[rmi.FLT_L1].label); 
        filterLabelL2.setText(rmi.channels[rmi.FLT_L2].label); 
        filterLabelR.setText(rmi.channels[rmi.FLT_R].label); 
        filterLabelG.setText(rmi.channels[rmi.FLT_G].label); 
        stateDeviceName.setText(rmi.stateDeviceName); 
        cameraDeviceName.setText(rmi.cameraDeviceName); 
        bGCapture.setSelected(rmi.channels[rmi.FLT_G].capture); 
        bRCapture.setSelected(rmi.channels[rmi.FLT_R].capture); 
        bL1Capture.setSelected(rmi.channels[rmi.FLT_L1].capture); 
        bL2Capture.setSelected(rmi.channels[rmi.FLT_L2].capture); 
        bTransCapture.setSelected(rmi.channels[rmi.FLT_TRANS].capture); 
        bPause.setEnabled(false); bPause.setText("Pause");bPause.setForeground(brown);
        bStop.setEnabled(false);
        bOnlineAnalysis.setSelected( rmi.bOnlineAnalysis);
        
        tweakExp.setSelected(rmi.tweakExp); 
        tweakExpBin1.setText(Integer.toString(rmi.tweakExposures[0])); 
        tweakExpBin2.setText(Integer.toString(rmi.tweakExposures[1])); 
        tweakExpBin4.setText(Integer.toString(rmi.tweakExposures[2])); 
    
    }//GEN-LAST:event_formWindowOpened

    private void bAnalizeActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bAnalizeActionPerformed
        rmi.processor.AnalyzeData();
    }//GEN-LAST:event_bAnalizeActionPerformed

    private void analysisFileKeyTyped(KeyEvent evt) {//GEN-FIRST:event_analysisFileKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_analysisFileKeyTyped

    private void stateDeviceNameFocusLost(FocusEvent evt) {//GEN-FIRST:event_stateDeviceNameFocusLost
        rmi.stateDeviceName = stateDeviceName.getText();
    }//GEN-LAST:event_stateDeviceNameFocusLost

    private void binRecItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_binRecItemStateChanged
        rmi.binRec = binRec.getSelectedIndex();
    }//GEN-LAST:event_binRecItemStateChanged

    private void zoomRecFocusLost(FocusEvent evt) {//GEN-FIRST:event_zoomRecFocusLost
        rmi.zoomRec = zoomRec.getText();
    }//GEN-LAST:event_zoomRecFocusLost

    private void filterLabelRFocusLost(FocusEvent evt) {//GEN-FIRST:event_filterLabelRFocusLost
        rmi.channels[rmi.FLT_R].label = filterLabelR.getText();
    }//GEN-LAST:event_filterLabelRFocusLost

    private void filterLabelGFocusLost(FocusEvent evt) {//GEN-FIRST:event_filterLabelGFocusLost
        rmi.channels[rmi.FLT_G].label = filterLabelG.getText();
    }//GEN-LAST:event_filterLabelGFocusLost

    private void filterGFocusLost(FocusEvent evt) {//GEN-FIRST:event_filterGFocusLost
        rmi.channels[rmi.FLT_G].filterSlot = Integer.valueOf(filterG.getText());
    }//GEN-LAST:event_filterGFocusLost

    private void filterRFocusLost(FocusEvent evt) {//GEN-FIRST:event_filterRFocusLost
        rmi.channels[rmi.FLT_R].filterSlot = Integer.valueOf(filterR.getText());
    }//GEN-LAST:event_filterRFocusLost

    private void shutterDelayFocusLost(FocusEvent evt) {//GEN-FIRST:event_shutterDelayFocusLost
        rmi.shutterDelay = Integer.valueOf(shutterDelay.getText());
        if (rmi.shutterDelay<0) rmi.shutterDelay = 0;
    }//GEN-LAST:event_shutterDelayFocusLost

    private void filterL2FocusLost(FocusEvent evt) {//GEN-FIRST:event_filterL2FocusLost
        rmi.channels[rmi.FLT_L2].filterSlot = Integer.valueOf(filterL2.getText());
    }//GEN-LAST:event_filterL2FocusLost

    private void filterLabelL2FocusLost(FocusEvent evt) {//GEN-FIRST:event_filterLabelL2FocusLost
        rmi.channels[rmi.FLT_L2].label = filterLabelL2.getText();
    }//GEN-LAST:event_filterLabelL2FocusLost

    private void filterLabelL1FocusLost(FocusEvent evt) {//GEN-FIRST:event_filterLabelL1FocusLost
        rmi.channels[rmi.FLT_L1].label = filterLabelL1.getText();
    }//GEN-LAST:event_filterLabelL1FocusLost

    private void filterLabelTransFocusLost(FocusEvent evt) {//GEN-FIRST:event_filterLabelTransFocusLost
        rmi.channels[rmi.FLT_TRANS].label = filterLabelTrans.getText();
    }//GEN-LAST:event_filterLabelTransFocusLost

    private void filterL1FocusLost(FocusEvent evt) {//GEN-FIRST:event_filterL1FocusLost
        rmi.channels[rmi.FLT_L1].filterSlot = Integer.valueOf(filterL1.getText());
    }//GEN-LAST:event_filterL1FocusLost

    private void filterTransFocusLost(FocusEvent evt) {//GEN-FIRST:event_filterTransFocusLost
        rmi.channels[rmi.FLT_TRANS].filterSlot = Integer.valueOf(filterTrans.getText());
    }//GEN-LAST:event_filterTransFocusLost

    private void channelGroupFocusLost(FocusEvent evt) {//GEN-FIRST:event_channelGroupFocusLost
        rmi.channelGroup = channelGroup.getText();
    }//GEN-LAST:event_channelGroupFocusLost

    private void binLiveItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_binLiveItemStateChanged
        rmi.binLive = binLive.getSelectedIndex();        // TODO add your handling code here:
    }//GEN-LAST:event_binLiveItemStateChanged

    private void zoomLiveFocusLost(FocusEvent evt) {//GEN-FIRST:event_zoomLiveFocusLost
        rmi.zoomLive = zoomLive.getText();
    }//GEN-LAST:event_zoomLiveFocusLost

    private void bMultiPosActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bMultiPosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bMultiPosActionPerformed

    private void bCloseActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bCloseActionPerformed
        try {
            CheckCanExit();
        } catch (InterruptedException ex) {
            Logger.getLogger(RMIControlForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bCloseActionPerformed

    private void bPauseActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bPauseActionPerformed
        rmi.TogglePausedState();
    }//GEN-LAST:event_bPauseActionPerformed

    private void bStopActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bStopActionPerformed
        try {
            rmi.recStop();
        } catch (InterruptedException ex) {
            Logger.getLogger(RMIControlForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bStopActionPerformed

    private void bStartActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bStartActionPerformed
        try {
            rmi.recReStart();
        } catch (Exception ex) {
            Logger.getLogger(RMIControlForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bStartActionPerformed

    private void bShowCommentActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bShowCommentActionPerformed
        
        if (rmi.bExperimentIsSetUp)
            rmi.rmi_comment_form.setVisible(true);
        else
        {
            Object[] options = {"Yes","No"};
                int n = JOptionPane.showOptionDialog(null, "No experiment is set up. Create new experiment?",    "Warning", JOptionPane.YES_NO_OPTION,    JOptionPane.QUESTION_MESSAGE,    null,    options,    options[0]);
                if (n==0) 
                {
                    try {
                        rmi.newStorage();
                        rmi.rmi_comment_form.setVisible(true);
                    } 
                    catch (IOException ex) {
                        Logger.getLogger(RMIControlForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                }
        }
    }//GEN-LAST:event_bShowCommentActionPerformed

    private void bNewExpActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bNewExpActionPerformed
        try {
            int f = rmi.newStorage();
        } catch (IOException ex) {
            Logger.getLogger(RMIControlForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bNewExpActionPerformed

    private void bWriteToDiskActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bWriteToDiskActionPerformed
        rmi.bWriteToDisk = bWriteToDisk.isSelected();
    }//GEN-LAST:event_bWriteToDiskActionPerformed

    private void bDataFileActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bDataFileActionPerformed
        rmi.newDataFile();
    }//GEN-LAST:event_bDataFileActionPerformed

    private void dataFileKeyTyped(KeyEvent evt) {//GEN-FIRST:event_dataFileKeyTyped
        rmi.DataFile = dataFile.getText();
    }//GEN-LAST:event_dataFileKeyTyped

    private void bDataHomeActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bDataHomeActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File(rmi.DataHome));
        chooser.setDialogTitle("Choose folder to keep data");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            SetHomeDirectory(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_bDataHomeActionPerformed

    private void dataHomeFocusLost(FocusEvent evt) {//GEN-FIRST:event_dataHomeFocusLost
        SetHomeDirectory(dataHome.getText());
    }//GEN-LAST:event_dataHomeFocusLost

    private void bLiveActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bLiveActionPerformed
        rmi.liveMode ^= true;
        try {
            rmi.runLive(rmi.liveMode);
            if (rmi.liveMode)
            {
                bLive.setText("Stop");
                bStart.setEnabled(false);
            }
            else
            {
                bLive.setText("Live");
                bStart.setEnabled(true);
            }
        } catch (Exception ex) { Logger.getLogger(RMIControlForm.class.getName()).log(Level.SEVERE, null, ex);   }
    }//GEN-LAST:event_bLiveActionPerformed

    private void bSnapActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bSnapActionPerformed
        try {
            rmi.runSnap();
        } catch (Exception ex) { Logger.getLogger(RMIControlForm.class.getName()).log(Level.SEVERE, null, ex);   }
    }//GEN-LAST:event_bSnapActionPerformed

    private void recIntervalActionPerformed(ActionEvent evt) {//GEN-FIRST:event_recIntervalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_recIntervalActionPerformed

    private void recIntervalFocusLost(FocusEvent evt) {//GEN-FIRST:event_recIntervalFocusLost
        if (recInterval.getText().isEmpty()) recInterval.setText("1");
        rmi.recInterval = Float.valueOf(recInterval.getText());
        if (rmi.recInterval == 0) rmi.recInterval = 1;
    }//GEN-LAST:event_recIntervalFocusLost

    private void recTimeFocusLost(FocusEvent evt) {//GEN-FIRST:event_recTimeFocusLost
        if (recTime.getText().isEmpty()) recTime.setText("1");
        rmi.recTime = Float.valueOf(recTime.getText());
        if (rmi.recTime == 0) rmi.recTime = 1;
    }//GEN-LAST:event_recTimeFocusLost

    private void bL2CaptureActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bL2CaptureActionPerformed
        rmi.channels[rmi.FLT_L2].capture = bL2Capture.isSelected();
    }//GEN-LAST:event_bL2CaptureActionPerformed

    private void bL1CaptureActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bL1CaptureActionPerformed
        rmi.channels[rmi.FLT_L1].capture = bL1Capture.isSelected();
    }//GEN-LAST:event_bL1CaptureActionPerformed

    private void bRCaptureActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bRCaptureActionPerformed
        rmi.channels[rmi.FLT_R].capture = bRCapture.isSelected();
    }//GEN-LAST:event_bRCaptureActionPerformed

    private void bGCaptureActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bGCaptureActionPerformed
        rmi.channels[rmi.FLT_G].capture = bGCapture.isSelected();
    }//GEN-LAST:event_bGCaptureActionPerformed

    private void bTransCaptureActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bTransCaptureActionPerformed
        rmi.channels[rmi.FLT_TRANS].capture = bTransCapture.isSelected();
    }//GEN-LAST:event_bTransCaptureActionPerformed

    private void expRFocusLost(FocusEvent evt) {//GEN-FIRST:event_expRFocusLost
        rmi.channels[rmi.FLT_R].exposure = Integer.valueOf(expR.getText());
        if (rmi.channels[rmi.FLT_R].exposure == 0) rmi.channels[rmi.FLT_R].exposure = 1;
    }//GEN-LAST:event_expRFocusLost

    private void expGFocusLost(FocusEvent evt) {//GEN-FIRST:event_expGFocusLost
        rmi.channels[rmi.FLT_G].exposure = Integer.valueOf(expG.getText());
        if (rmi.channels[rmi.FLT_G].exposure == 0) rmi.channels[rmi.FLT_G].exposure = 1;
    }//GEN-LAST:event_expGFocusLost

    private void bRActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bRActionPerformed
        try {
            rmi.setFilterExp(rmi.FLT_R);
        } catch (Exception ex) {
            Logger.getLogger(RMIControlForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bRActionPerformed

    private void bGActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bGActionPerformed
        try {
            rmi.setFilterExp(rmi.FLT_G);
        } catch (Exception ex) {
            Logger.getLogger(RMIControlForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bGActionPerformed

    private void bTransActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bTransActionPerformed
        try {
            rmi.setFilterExp(rmi.FLT_TRANS);
        } catch (Exception ex) {
            Logger.getLogger(RMIControlForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bTransActionPerformed

    private void bL1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bL1ActionPerformed
        try {
            rmi.setFilterExp(rmi.FLT_L1);
        } catch (Exception ex) {
            Logger.getLogger(RMIControlForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bL1ActionPerformed

    private void bL2ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bL2ActionPerformed
        try {
            rmi.setFilterExp(rmi.FLT_L2);
        } catch (Exception ex) {
            Logger.getLogger(RMIControlForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_bL2ActionPerformed

    private void expL1FocusLost(FocusEvent evt) {//GEN-FIRST:event_expL1FocusLost
        rmi.channels[rmi.FLT_L1].exposure = Integer.valueOf(expL1.getText());
        if (rmi.channels[rmi.FLT_L1].exposure == 0) rmi.channels[rmi.FLT_L1].exposure = 1;
    }//GEN-LAST:event_expL1FocusLost

    private void expTransFocusLost(FocusEvent evt) {//GEN-FIRST:event_expTransFocusLost
        rmi.channels[rmi.FLT_TRANS].exposure = Integer.valueOf(expTrans.getText());
        if (rmi.channels[rmi.FLT_TRANS].exposure == 0) rmi.channels[rmi.FLT_TRANS].exposure = 1;
    }//GEN-LAST:event_expTransFocusLost

    private void expL2FocusLost(FocusEvent evt) {//GEN-FIRST:event_expL2FocusLost
        rmi.channels[rmi.FLT_L2].exposure = Integer.valueOf(expL2.getText());
        if (rmi.channels[rmi.FLT_L2].exposure == 0) rmi.channels[rmi.FLT_L2].exposure = 1;
    }//GEN-LAST:event_expL2FocusLost

    private void bProtocolDiscardActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bProtocolDiscardActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bProtocolDiscardActionPerformed

    private void bProtocolApplyActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bProtocolApplyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bProtocolApplyActionPerformed

    private void eLastFrameKeyTyped(KeyEvent evt) {//GEN-FIRST:event_eLastFrameKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_eLastFrameKeyTyped

    private void eLastFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eLastFrameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eLastFrameActionPerformed

    private void bOnlineAnalysisActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bOnlineAnalysisActionPerformed
        rmi.bOnlineAnalysis = bOnlineAnalysis.isSelected(); 
        
        //if (rmi.bOnlineAnalysis)
          //  rmi.processor.AnalyzeData();
    }//GEN-LAST:event_bOnlineAnalysisActionPerformed

    private void bAutoRefActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bAutoRefActionPerformed
        rmi.bAutoRef = bAutoRef.isSelected();
    }//GEN-LAST:event_bAutoRefActionPerformed

    private void bShowROIManActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bShowROIManActionPerformed
            RoiManager rm = RoiManager.getInstance();
    if (rm==null){ 
        rm = new RoiManager();
    }
    }//GEN-LAST:event_bShowROIManActionPerformed

    private void cameraDeviceNameFocusLost(FocusEvent evt) {//GEN-FIRST:event_cameraDeviceNameFocusLost
        rmi.cameraDeviceName = cameraDeviceName.getText();
    }//GEN-LAST:event_cameraDeviceNameFocusLost

    private void bLoadDataActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bLoadDataActionPerformed
          JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File(rmi.DataHome));
        chooser.setDialogTitle("Choose data stack to analyse");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                rmi.processor.openData(chooser.getSelectedFile());
                analysisFile.setText(chooser.getSelectedFile().getAbsolutePath());
            } catch (IOException ex) {Logger.getLogger(RMIControlForm.class.getName()).log(Level.SEVERE, null, ex);}
        }
        bOnlineAnalysis.setSelected(false);
        rmi.bOnlineAnalysis = false;
    }//GEN-LAST:event_bLoadDataActionPerformed

    private void bShutterActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bShutterActionPerformed
        
          rmi.shutterOpen ^= true;
        try {
          
            rmi.openShutter(rmi.shutterOpen);
            if (rmi.shutterOpen)
            {
                bShutter.setText("Close");
                bShutter.setSelected(true);
            }
            else
            {
                bShutter.setText("Open");
                bShutter.setSelected(false);
            }
        } catch (Exception ex) { Logger.getLogger(RMIControlForm.class.getName()).log(Level.SEVERE, null, ex);   }
        
    }//GEN-LAST:event_bShutterActionPerformed

    private void tweakExpBin1FocusLost(FocusEvent evt) {//GEN-FIRST:event_tweakExpBin1FocusLost
         rmi.tweakExposures[0] = Integer.valueOf(tweakExpBin1.getText());
    }//GEN-LAST:event_tweakExpBin1FocusLost

    private void tweakExpBin2FocusLost(FocusEvent evt) {//GEN-FIRST:event_tweakExpBin2FocusLost
        rmi.tweakExposures[1] = Integer.valueOf(tweakExpBin2.getText());
    }//GEN-LAST:event_tweakExpBin2FocusLost

    private void tweakExpBin4FocusLost(FocusEvent evt) {//GEN-FIRST:event_tweakExpBin4FocusLost
        rmi.tweakExposures[2] = Integer.valueOf(tweakExpBin4.getText());
    }//GEN-LAST:event_tweakExpBin4FocusLost

    private void tweakExpActionPerformed(ActionEvent evt) {//GEN-FIRST:event_tweakExpActionPerformed
        rmi.tweakExp = tweakExp.isSelected();
    }//GEN-LAST:event_tweakExpActionPerformed

    private void bAddRedROIsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bAddRedROIsActionPerformed
        //rmi.app.getDisplayManager().getCurrentWindow().getImageWindow().addMouseListener(this);
        int n = Integer.valueOf(nAddROIs.getText());
        AddROIs(n,Color.RED,"R");
    }//GEN-LAST:event_bAddRedROIsActionPerformed

    private void nAddROIsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_nAddROIsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nAddROIsActionPerformed

    private void nAddROIsKeyTyped(KeyEvent evt) {//GEN-FIRST:event_nAddROIsKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_nAddROIsKeyTyped

    private void bAddGreenROIsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bAddGreenROIsActionPerformed
        int n = Integer.valueOf(nAddROIs.getText());
        AddROIs(n,Color.GREEN,"G");
    }//GEN-LAST:event_bAddGreenROIsActionPerformed

    private void bAddGreenROIs1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_bAddGreenROIs1ActionPerformed
        int n = Integer.valueOf(nAddROIs.getText());
        AddROIs(n,Color.GRAY,"BG");
    }//GEN-LAST:event_bAddGreenROIs1ActionPerformed

    private void L1BGFocusLost(FocusEvent evt) {//GEN-FIRST:event_L1BGFocusLost
        rmi.L1bg = Integer.valueOf(L1BG.getText());
    }//GEN-LAST:event_L1BGFocusLost

    private void L2BGFocusLost(FocusEvent evt) {//GEN-FIRST:event_L2BGFocusLost
        rmi.L2bg = Integer.valueOf(L2BG.getText());
    }//GEN-LAST:event_L2BGFocusLost

    private void chkDoConstSubtractionActionPerformed(ActionEvent evt) {//GEN-FIRST:event_chkDoConstSubtractionActionPerformed
        rmi.doConstBGSubtraction = chkDoConstSubtraction.isSelected();
    }//GEN-LAST:event_chkDoConstSubtractionActionPerformed

    private void AddROIs(int num,Color col, String prefix)
    {
        int grid = 10;
        RoiManager rm = RoiManager.getInstance();
        if (rm==null)
            rm = new RoiManager();
        for (int i=0; i<num; i++)
        {
            int c = rm.getCount();
            OvalRoi roi = new OvalRoi(50+(c/grid)*25,50+(c%grid)*25 ,20,20);
            roi.setName(String.format("%s%d",prefix ,c+1));
            roi.setStrokeWidth(1);
            roi.setStrokeColor(col);
            rm.addRoi(roi);
        }        
        rm.runCommand("Show All");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RMIControlForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RMIControlForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RMIControlForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RMIControlForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new RMIControlForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ButtonGroup AnalizeGroup;
    public JFormattedTextField L1BG;
    public JFormattedTextField L2BG;
    private JLabel adjInterval;
    private JFormattedTextField analysisFile;
    private JToggleButton bAddGreenROIs;
    private JToggleButton bAddGreenROIs1;
    private JToggleButton bAddRedROIs;
    private JButton bAnalize;
    private JCheckBox bAutoRef;
    private JButton bClose;
    private JButton bDataFile;
    private JButton bDataHome;
    private ButtonGroup bFilterGroup;
    private JToggleButton bG;
    private JCheckBox bGCapture;
    public JCheckBox bGFPCorrection;
    private JToggleButton bL1;
    private JCheckBox bL1Capture;
    private JToggleButton bL2;
    private JCheckBox bL2Capture;
    private JButton bLive;
    private JToggleButton bLoadData;
    private JCheckBox bMultiPos;
    private JButton bNewExp;
    private JToggleButton bOnlineAnalysis;
    private JButton bPause;
    private JButton bProtocolApply;
    private JButton bProtocolDiscard;
    private JToggleButton bR;
    private JCheckBox bRCapture;
    private JButton bShowComment;
    private JButton bShowROIMan;
    private JButton bShutter;
    private JButton bSnap;
    private JButton bStart;
    private JButton bStop;
    private JToggleButton bTrans;
    private JCheckBox bTransCapture;
    private JCheckBox bWriteToDisk;
    private JComboBox binLive;
    private JComboBox binRec;
    private ButtonGroup buttonGroupAnalysisType;
    private JFormattedTextField cameraDeviceName;
    private JFormattedTextField channelGroup;
    private JCheckBox chkDoConstSubtraction;
    private JFormattedTextField dataFile;
    private JFormattedTextField dataHome;
    public JFormattedTextField eLastFrame;
    private JFormattedTextField expG;
    private JFormattedTextField expL1;
    private JFormattedTextField expL2;
    private JFormattedTextField expR;
    private JFormattedTextField expTrans;
    private JFormattedTextField filterG;
    private JFormattedTextField filterL1;
    private JFormattedTextField filterL2;
    private JFormattedTextField filterLabelG;
    private JFormattedTextField filterLabelL1;
    private JFormattedTextField filterLabelL2;
    private JFormattedTextField filterLabelR;
    private JFormattedTextField filterLabelTrans;
    private JFormattedTextField filterR;
    private JFormattedTextField filterTrans;
    private JLabel jLabel10;
    private JLabel jLabel11;
    private JLabel jLabel12;
    private JLabel jLabel13;
    private JLabel jLabel14;
    private JLabel jLabel15;
    private JLabel jLabel16;
    private JLabel jLabel17;
    private JLabel jLabel18;
    private JLabel jLabel19;
    private JLabel jLabel2;
    private JLabel jLabel20;
    private JLabel jLabel21;
    private JLabel jLabel22;
    private JLabel jLabel23;
    private JLabel jLabel24;
    private JLabel jLabel25;
    private JLabel jLabel26;
    private JLabel jLabel27;
    private JLabel jLabel28;
    private JLabel jLabel29;
    private JLabel jLabel3;
    private JLabel jLabel30;
    private JLabel jLabel31;
    private JLabel jLabel32;
    private JLabel jLabel33;
    private JLabel jLabel34;
    private JLabel jLabel35;
    private JLabel jLabel36;
    private JLabel jLabel37;
    private JLabel jLabel38;
    private JLabel jLabel39;
    private JLabel jLabel4;
    private JLabel jLabel40;
    private JLabel jLabel41;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JLabel jLabel7;
    private JLabel jLabel8;
    private JLabel jLabel9;
    private JPanel jPanel1;
    private JPanel jPanel10;
    private JPanel jPanel11;
    private JPanel jPanel12;
    private JPanel jPanel13;
    private JPanel jPanel14;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JPanel jPanel4;
    private JPanel jPanel5;
    private JPanel jPanel6;
    private JPanel jPanel7;
    private JPanel jPanel8;
    private JPanel jPanel9;
    private JRadioButton jRadioButton1;
    private JRadioButton jRadioButton2;
    private JScrollPane jScrollPane1;
    private JTabbedPane jTabbedPane1;
    private JTable jTable1;
    private JTextField jTextField2;
    public JLabel labelProgressCalc;
    private JLabel labelRecProgress;
    public JFormattedTextField nAddROIs;
    private JProgressBar progressCalc;
    private JProgressBar progressRec;
    private JFormattedTextField recInterval;
    private JFormattedTextField recTime;
    private JFormattedTextField shutterDelay;
    private JFormattedTextField stateDeviceName;
    private JCheckBox tweakExp;
    private JFormattedTextField tweakExpBin1;
    private JFormattedTextField tweakExpBin2;
    private JFormattedTextField tweakExpBin4;
    private JFormattedTextField zoomLive;
    private JFormattedTextField zoomRec;
    // End of variables declaration//GEN-END:variables

    int SetHomeDirectory(String dir) 
    {
        rmi.canRun = true; // recovers from previously typed bad path
        rmi.DataHome = dir;
        dataHome.setText(dir);
        File hDir = new File(dir);
        if (!hDir.exists()) {
            if (!hDir.mkdir()) {  
                JOptionPane.showMessageDialog(null,"Cannot create data home folder");
                rmi.canRun = false;
                return 0;
            }        
        }
        return 1;
    }

    void setDataFileName(String _DataFile) {
        dataFile.setText(_DataFile);
    }

    void resetGroupFilters() {
        bFilterGroup.clearSelection();
    }


    void renderUI(RSTATE st) {
        
        switch(st){
            case REC_STOP:
                SetTextProgress("Idle");
                bLive.setEnabled(true);
                bPause.setEnabled(false);
                bStart.setEnabled(true);
                bStop.setEnabled(false);
                chkDoConstSubtraction.setEnabled(true);
                break;
            case REC_START:
                //if (rmi.bAcqNotFastEnough)
                
                SetProgressBar(0);
                SetTextProgress("Recording in progress...");
                resetGroupFilters();
                bLive.setEnabled(false);
                bPause.setEnabled(true);
                bStart.setEnabled(false);
                bStop.setEnabled(true);
                chkDoConstSubtraction.setEnabled(false);
                break;
            case REC_RUNNING:
                
                SetProgressBar((int)rmi.curCycle*100/rmi.recCyclesTotal);
                double elapsed = System.nanoTime() - rmi.msecStart;
                SimpleDateFormat form = new SimpleDateFormat("mm:ss");
                Date d = new Date();
                d.setTime((long)(elapsed/1000000.0));
                String s = form.format(d); // set the default name
                String c = String.format("Recording in progress : %s ( frame %d )", s, rmi.curCycle);
                SetTextProgress(c);
                break;    
            case REC_IDLE:
                
                break;    
                
                
            
        }
    }

    void updateIntervalIndicator(int adjustedInterval) {
        adjInterval.setText(String.format("%d", adjustedInterval));
    }

    void setResumeButton(boolean b) {
        if (!b)
        {
            bPause.setText("Pause");
            bPause.setForeground(brown);                
        }
        else
        {
            bPause.setText("Resume");
            bPause.setForeground(drk_green);
        }
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        
    }

    @Override
    public void mousePressed(MouseEvent e) {
        
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        JOptionPane.showMessageDialog(null,"Mouse Up!");
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        
    }

    @Override
    public void mouseExited(MouseEvent e) {
        
    }
   
}
